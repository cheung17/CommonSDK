package com.commonsdk.zeunpro.appupdatecheck;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;

import com.commonsdk.app.AppInfo;
import com.commonsdk.http.util.OkHttpUtil;
import com.commonsdk.network.NetUtils;
import com.commonsdk.util.DesBase64Util;
import com.commonsdk.util.PreferencesUtils;
import com.commonsdk.zeunpro.appupdatecheck.receiver.AppUpdateReceiver;
import com.commonsdk.zeunpro.data.ZpData;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;


/**
 * 单个应用检测版本更新功能。
 *
 * @author ztx
 */
public class AppUpdateCheck {
    /**
     * app检测更新的路径
     */
    public static final String APPUPDATE_URL = "/zeunpro/api/apkupdate.do";
    /**
     * 弹出更新对话框的最小间隔时间。单位：毫秒
     */
    public static final long CHECKSPACINGTIME = 1000 * 60 * 60 * 24;
    /**
     * 检测更新时，发送的key
     */
    private static final String APPPACKAGENAME = "packagename";
    /**
     * 检测更新时，发送的key
     */
    private static final String APPVERSIONCODE = "versioncode";
    /**
     * 检测更新时，发送的key
     */
    private static final String APPVERSIONNAME = "version";
    private static final String APPTYPE = "apptype";
    private static final String CHANNEL_ID = "channel_id";
    /***
     * 最后一次弹出提示的时间的KEY
     */
    public static final String LAST_TOAST_TIME_KEY = "last_toast_time";
    /**
     * 上下文
     */
    private Context context;
    /**
     * 包信息
     */
    private PackageInfo pi;
    private String mCheckUrl;
    /**
     * 上一次检查更新情况的时间，单位：毫秒
     */

    /**
     * @param context 上下文
     * @param url     检查更新的URl 用IP+{@link #APPUPDATE_URL }
     *                更新以versioncode为准
     */
    public AppUpdateCheck(Context context, String url) {
        this.context = context;
        this.mCheckUrl = url;
        try {
            pi = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     * 更新结果的的Handler
     */
    class UpdateHandler extends Handler {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (msg.what != OkHttpUtil.Success) {
                Log.i("ztx", "检查更新网络错误" + System.currentTimeMillis());
                return;
            }
            AppUpdateModel updateModel = AppUpdateModel.json2obj((String) msg.obj);
            if (updateModel != null && OkHttpUtil.MESSAGE_SUCCESS.equals(updateModel.getMessage())) {
                int versioncode = Integer.parseInt(updateModel.getVersioncode());
                if (AppInfo.getVersionCode(context) >= versioncode) {
                    //版本比现在还低呢
                    Log.i("ztx", "本地版本更高" + System.currentTimeMillis());
                    return;
                }
                //统一去广播里处理
                Intent intent = new Intent(AppUpdateReceiver.SHOW_NEW_VERSION_ACTION);
                intent.putExtra(AppUpdateReceiver.DATA, updateModel);
                context.sendBroadcast(intent);
            } else {
                // 后台返回空数据，则提示不用升级
                Log.i("ztx", "后台返回空数据，则提示不用升级" + System.currentTimeMillis());
            }
        }
    }

    public static final long ONE_HOUR = 60 * 60 * 1000;
    public static final long ONE_DAY = 60 * 60 * 24 * 1000;
    public static final long ONE_MIN = 60 * 1000;
    public static final long ALWAYS = 0 * 1000;

    /**
     * 检测是否有新版本。
     *
     * @param interalTime 间隔弹出时间距离上一次弹出
     *                    {@link #ONE_DAY
     * @link #ONE_HOUR}
     */
    public void checkAppUpdate(long interalTime) {
        checkAppUpdate(interalTime, "");
    }

    /**
     * 检测是否有新版本。
     *
     * @param interalTime 间隔弹出时间  距离上一次弹出
     * @param channelId   渠道号
     */
    public void checkAppUpdate(long interalTime, String channelId) {
        //一天提醒一次
        long nowTime = System.currentTimeMillis();
        Log.i("ztx", "检查更新" + System.currentTimeMillis());
        long lastToastTime = PreferencesUtils.getLong(context, LAST_TOAST_TIME_KEY, 0);
        if (nowTime - lastToastTime < interalTime) {
            Log.i("ztx", "距离上次弹出未超过预设时间" + System.currentTimeMillis());
            return;  //距离上次弹出未超过预设时间
        }
        if (pi != null) {
            String AppPackageName = pi.packageName;
            Looper looper = context.getMainLooper();
            if (NetUtils.isConnected(context)) {
                HashMap<String, String> map = new HashMap<>();
                JSONObject json = new JSONObject();
                try {
                    json.put(APPPACKAGENAME, "com.wandoujia.phoenix2");
                    json.put(APPVERSIONNAME, "1.3.2");
                    json.put(CHANNEL_ID, channelId);
                    json.put(APPTYPE, "1");
                    PreferencesUtils.putLong(context, LAST_TOAST_TIME_KEY, System.currentTimeMillis());
                    map.put(ZpData.DATA, DesBase64Util.encryptDES(json.toString(), ZpData.DES_KEY));
                    OkHttpUtil.postParam(context, new UpdateHandler(), map, mCheckUrl, false, "", false);
                } catch (JSONException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

}
